################### GOOGLE TEST ###########################
# function - DMA_sync_g_test_framework
# Syncs gtest framework, when project is being configured
function (DMA_sync_g_test_framework)
    include(FetchContent)
    FetchContent_Declare(
      googletest
      GIT_REPOSITORY https://github.com/google/googletest.git
      GIT_TAG        v1.10.x
    ) 
    FetchContent_MakeAvailable(googletest)
endfunction(DMA_sync_g_test_framework)

# function - DMA_add_g_test
# Adds gtest-based unit-test to the build
# param_0 - name of the test. Should be the same, as the name of the *.cpp file, which implements the test
# param_1 ... param_n - libraries, which should be linked to a test
function(DMA_add_g_test)
    if (DEFINED ARGV0)
        if(COMMAND cmake_policy)
          cmake_policy(SET CMP0003 NEW)
        endif(COMMAND cmake_policy)

        add_executable(${ARGV0} ${ARGV0}.cpp)
        target_link_libraries(${ARGV0} gtest_main)
        add_test(NAME ${ARGV0} COMMAND ${ARGV0})
        target_include_directories(${ARGV0} PRIVATE ${PROJECT_SOURCE_DIR})
        
        if(ARGC GREATER 1)
            math(EXPR lastIndex "${ARGC}-1")
            foreach(index RANGE 1 ${lastIndex})
                target_link_libraries(${ARGV0} ${ARGV${index}})
            endforeach()
        endif()
    endif()
endfunction(DMA_add_g_test)
################### GOOGLE TEST ( END ) ###################

################### DMA_Plantuml ##########################
# function - DMA_sync_plantuml
# Syncs dma_plantuml sub-project, when project is being configured
function (DMA_sync_plantuml)
    include(FetchContent)
    FetchContent_Declare(
      dma_plantuml
      GIT_REPOSITORY https://github.com/svlad-90/DMA_Plantuml.git
      GIT_TAG        master
    ) 
    FetchContent_GetProperties(dma_plantuml)
    if(NOT dma_plantuml_POPULATED)
        FetchContent_Populate(dma_plantuml)
        add_subdirectory(${dma_plantuml_SOURCE_DIR}/DMA_Plantuml ${dma_plantuml_BINARY_DIR}/DMA_Plantuml)
    endif()
    
    include_directories(${dma_plantuml_SOURCE_DIR}/DMA_Plantuml/include)
endfunction(DMA_sync_plantuml)
################### DMA_Plantuml ( END ) ###################

################### DMA_Framework ##########################
# function - DMA_sync_framework
# Syncs dma_framework sub-project, when project is being configured
function (DMA_sync_framework)
    include(FetchContent)
    FetchContent_Declare(
      dma_framework
      GIT_REPOSITORY https://github.com/svlad-90/DMA_Framework.git
      GIT_TAG        master
    ) 
    FetchContent_MakeAvailable(dma_framework)
endfunction(DMA_sync_framework)
################### DMA_Framework ( END ) ###################

################### CLANG_TIDY ############################
function(DMA_add_subdirectory_with_clang_tidy subdirectory)
    if( DMA_CLANG_TIDY_BUILD )
        message("-- [DMA_Plantuml]: clang-tidy build.")
        set(CMAKE_CXX_CLANG_TIDY "clang-tidy")
        list(APPEND CMAKE_CXX_CLANG_TIDY
        "-format-style='file'"
        "-warnings-as-errors=*" )
    endif()

    add_subdirectory(${subdirectory})
endfunction(DMA_add_subdirectory_with_clang_tidy)
################### CLANG_TIDY ( END ) ####################

################### PREPARE ###############################
macro (DMA_Prepare)

    # copy paste of compiler flags replacement from gtest.
    # done in order to avoid the "/Md /Mt mismatch" build errors and warnings
    
    if (MSVC)
    # For MSVC, CMake sets certain flags to defaults we want to override.
    # This replacement code is taken from sample in the CMake Wiki at
    # https://gitlab.kitware.com/cmake/community/wikis/FAQ#dynamic-replace.
    foreach (flag_var
             CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
             CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
             CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
             CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
      if (NOT BUILD_SHARED_LIBS AND NOT gtest_force_shared_crt)
        # When Google Test is built as a shared library, it should also use
        # shared runtime libraries.  Otherwise, it may end up with multiple
        # copies of runtime library data in different modules, resulting in
        # hard-to-find crashes. When it is built as a static library, it is
        # preferable to use CRT as static libraries, as we don't have to rely
        # on CRT DLLs being available. CMake always defaults to using shared
        # CRT libraries, so we override that default here.
        string(REPLACE "/MD" "-MT" ${flag_var} "${${flag_var}}")
      endif()
      # We prefer more strict warning checking for building Google Test.
      # Replaces /W3 with /W4 in defaults.
      string(REPLACE "/W3" "/W4" ${flag_var} "${${flag_var}}")
      # Prevent D9025 warning for targets that have exception handling
      # turned off (/EHs-c- flag). Where required, exceptions are explicitly
      # re-enabled using the cxx_exception_flags variable.
      string(REPLACE "/EHsc" "" ${flag_var} "${${flag_var}}")
    endforeach()
  endif()
endmacro(DMA_Prepare)
################### PREPARE ( AND )########################